generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String       @id @default(cuid())
  name             String?
  email            String?      @unique
  emailVerified    DateTime?
  image            String?
  interviewTime    DateTime?
  role             Role         @default(CONTESTANT)
  teamId           String?
  accounts         Account[]
  posts            Post[]
  sessions         Session[]
  team             Team?        @relation(fields: [teamId], references: [id])
  judgedChallengeA ChallengeA[]
  judgedChallengeB ChallengeB[]
  judgedChallengeC ChallengeC[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id         String       @id @default(cuid())
  name       String
  link       String?
  rounds     Round[]
  members    User[]
  challengeA ChallengeA[]
  challengeB ChallengeB[]
  challengeC ChallengeC[]
}

model Round {
  id         String      @id @default(cuid())
  number     Int
  teamId     String?
  challenges Challenge[]
  team       Team?       @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Challenge {
  id      String   @id @default(cuid())
  name    String
  time    DateTime
  roundId String
  round   Round    @relation(fields: [roundId], references: [id], onDelete: Cascade)
}

enum Role {
  CONTESTANT
  JUDGE
  ADMIN
}

model ChallengeA {
  id                        String  @id @default(cuid())
  ballContact               Boolean
  ballSaved                 Boolean
  finshTrack                Boolean
  finishTrackNoCrossingLine Boolean
  obtainedBonus             Boolean
  roundTimeSeconds          Int
  points                    Int
  roundId                   String
  lackOfProgress            Int
  judgeID                   String
  user                      User    @relation(fields: [judgeID], references: [id], onDelete: Cascade)
  teamId                    String
  team                      Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model ChallengeB {
  id               String @id @default(cuid())
  trackPoints      Int
  roundTimeSeconds Int
  points           Int
  roundId          String
  lackOfProgress   Int
  judgeID          String
  user             User   @relation(fields: [judgeID], references: [id], onDelete: Cascade)
  teamId           String
  team             Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model ChallengeC {
  id               String @id @default(cuid())
  trackPoints      Int
  roundTimeSeconds Int
  points           Int
  roundId          String
  lackOfProgress   Int
  judgeID          String
  user             User   @relation(fields: [judgeID], references: [id], onDelete: Cascade)
  teamId           String
  team             Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
}
