generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  interviewTime DateTime?
  role          Role      @default(CONTESTANT)
  accounts      Account[]
  posts         Post[]
  sessions      Session[]
  teamId        String?
  team          Team?     @relation(fields: [teamId], references: [id], onDelete: SetNull)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id      String  @id @default(cuid())
  name    String
  members User[]
  rounds  Round[]
}

model Round {
  id         String      @id @default(cuid())
  number     Int
  challenges Challenge[]

  team   Team?   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String?
}

model Challenge {
  id      String   @id @default(cuid())
  name    String
  time    DateTime
  round   Round    @relation(fields: [roundId], references: [id], onDelete: Cascade)
  roundId String
}

enum Role {
  CONTESTANT
  JUDGE
  ADMIN
}
